# ********************************************************************************
# Copyright (c) 2024 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made
# available under the terms of the Apache Software License 2.0
# which is available at https://www.apache.org/licenses/LICENSE-2.0.
#
# SPDX-License-Identifier: Apache-2.0
# ********************************************************************************

---
name: Validate CycloneDX CDXA

on:
  pull_request:
    branches: [main]
    paths:
      - ".github/workflows/validate-cdxa.yml"
      - "**/*.xml"

# Cancel existing runs if user makes another push.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  validate_and_verify_cyclonedx_cdxa:
    name: validate_cdxa
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Download cyclonedx-cli
        run: |
          curl -L -O https://github.com/CycloneDX/cyclonedx-cli/releases/latest/download/cyclonedx-linux-x64
          chmod +x cyclonedx-linux-x64

      - name: Install libxml-xpath-perl
        run: |
          sudo apt-get update
          sudo apt-get install libxml-xpath-perl

      - name: Validate CDXA documents using cyclonedx-cli
        run: |
          XML_FILES=$(gh pr view "$PR_NUMBER" --repo "$REPOSITORY" --json files | jq -r '.files[] | .path' | grep "\.xml$")
          echo "$XML_FILES" | while read XML_FILE; do
              echo "CycloneDX validating file: $XML_FILE"
              ./cyclonedx-linux-x64 validate --input-file "$XML_FILE" --fail-on-errors --input-version v1_6
              echo "Verifying Signature of file: $XML_FILE using public key $XML_FILE.sign.pub"
              ./cyclonedx-linux-x64 verify all "$XML_FILE" --key-file "$XML_FILE.sign.pub"
          done
        env:
          REPOSITORY: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: Validate CDXA content meets Temurin attestation requirements
        run: |
          XML_FILES=$(gh pr view "$PR_NUMBER" --repo "$REPOSITORY" --json files | jq -r '.files[] | .path' | grep "\.xml$")
          echo "$XML_FILES" | while read XML_FILE; do
              # Validate filename

              if [[ "$XML_FILE" =~ ^([0-9]+)/jdk_([0-9]+)_0_([0-9]+)_([0-9]+)_([^_]+)_([^\._]+)\.xml$ ]]; then
                  echo "Valid CDXA file name for update version $XML_FILE"
                  MAJOR_FOLDER=${BASH_REMATCH[1]}
                  MAJOR_VERSION=${BASH_REMATCH[2]}
                  UPDATE_VERSION=${BASH_REMATCH[3]}
                  BUILD_NUM=${BASH_REMATCH[4]}
                  PLATFORM=${BASH_REMATCH[5]}
                  ORG=${BASH_REMATCH[6]}
                  JDK_BUILD="jdk-$MAJOR_VERSION.0.$UPDATE_VERSION+$BUILD_NUM"
              elif [[ "$XML_FILE" =~ ^([0-9]+)/jdk_([0-9]+)_([0-9]+)_([^_]+)_([^\._]+)\.xml$ ]]; then
                  echo "Valid CDXA file name for new version $XML_FILE"
                  MAJOR_FOLDER=${BASH_REMATCH[1]}
                  MAJOR_VERSION=${BASH_REMATCH[2]}
                  UPDATE_VERSION="0"
                  BUILD_NUM=${BASH_REMATCH[3]}
                  PLATFORM=${BASH_REMATCH[4]}
                  ORG=${BASH_REMATCH[5]}
                  JDK_BUILD="jdk-$MAJOR_VERSION+$BUILD_NUM"
              else
                  echo "$XML_FILE file name is not of the correct format:"
                  echo "    N/jdk_M_0_U_B_(Platform)_(Your Organisation).xml"
                  echo " or N/jdk_M_B_(Platform)_(Your Organisation).xml"
                  exit 1
              fi

              # Print bom content
              xpath -q -e '/bom' "$XML_FILE"

              # Ensure 1 VERIFIED_REPRODUCIBLE_BUILD
              if ! [ $(xpath -q -e 'count(/bom/declarations/claims/claim/predicate[text()="VERIFIED_REPRODUCIBLE_BUILD"])' "$XML_FILE") -eq 1 ]; then
                  echo "ERROR: $XML_FILE CDXA document does not contain a /bom/declarations/claims/claim/predicate with value VERIFIED_REPRODUCIBLE_BUILD"
                  exit 1
              fi

              # Verify claim target with bom-ref exists
              TARGET_BOM_REF=$(xpath -q -e '/bom/declarations/claims/claim/predicate[text()="VERIFIED_REPRODUCIBLE_BUILD"]/../target/text()' "$XML_FILE")
              if ! [ $(xpath -q -e 'count(/bom/declarations/targets/components/component[@bom-ref="'$TARGET_BOM_REF'"])' "$XML_FILE") -eq 1 ]; then
                  echo "ERROR: $XML_FILE CDXA document does not contain a /bom/declarations/targets/components/component with 'bom-ref' == $TARGET_BOM_REF"
                  exit 1
              fi

              # Verify Component.name of format: Temurin <JDK_BUILD> <PLATFORM>
              COMPONENT_NAME=$(xpath -q -e '/bom/declarations/targets/components/component[@bom-ref="'$TARGET_BOM_REF'"]/name/text()' "$XML_FILE")
              if [[ ! "$COMPONENT_NAME" =~ ^Temurin\ $JDK_BUILD\ $PLATFORM ]]; then
                  echo "ERROR: $XML_FILE CDXA document /bom/declarations/targets/components/component/name($COMPONENT_NAME) is not the correct format: Temurin <JDK_BUILD> <PLATFORM>"
                  exit 1
              fi
          done
        env:
          REPOSITORY: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

